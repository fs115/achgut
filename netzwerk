# Edge- und Nodelist

# Edge- und Nodelist zusammenführen
library(igraph)
library(igraphdata)

ag <- read.csv("ag.csv", header=TRUE)
is.data.frame(ag)
ag

agi <- graph.data.frame(ag, directed = TRUE)
class(agi)
agi

plot(agi)

ag <- read.csv("ag.csv", header=T, as.is=T, sep = ",")
nodes <- read.csv("nl.csv", header=T, as.is=T, sep = ",")

# prüft, ob alle Variablen eingelesen wurden
head(ag)
head(nodes)

# wandelt die edgelist in eine Matrix um und baut das igraph-Objekt
hties <-as.matrix(ag)
ag <- graph_from_data_frame(d=hties, vertices=nodes, directed=T)
ag

# Übersicht über die Edge- und Vertex-Attribute
summary(ag)
edge_attr(ag)
vertex_attr(ag)

# der Standard-Plot unseres Netzwerks.
plot(ag)

# EDGE/KANTEN-Attribute festlegen

E(ag)$arrow.size <- .2      # definiert die Pfeilspitze auf 2
E(ag)$color="black"         # definiert die Kantenfarbe auf schwarz
E(ag)$width <- E(ag)$weight # definiert die Kantenstärke nach dem hinterlegten Gewicht.
E(ag)$color="red"           # setzt die Farbe rot für Kanten
E(ag)$curved=.2             # leicht gebogenen Kanten für eine bessere Lesbarkeit.

plot(ag, layout = layout_with_fr) # generiert den neuen Plot mit dem Layout nach Fruchterman-Rheingold. Fruchterman-Rheingold berechnet das Netzwerk jedes Mal neu.

# VERTEX/KNOTEN-Attribute festlegen

# Im Netzwerk sind männliche und weibliche Autoren abgelegt, die über das Vertex.Attribut $sex mit "1" (weiblich) oder "2" (männlich) kodiert sind. 
Alle Männer (Autoren) sollen nun mit der Farbe blau und alle Frauen (Autorinnen) mit der Farbe rot visualisiert werden.

#FARBEN nach Vertex-Attributen definieren
colrs <- c("red", "blue")
#definiert das Farbspektrum, der verwendeten Farben und legt diese in einem neuen Vector colrs fest. 
Farbpaletten sind hier hinterlegt: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf

V(ag)$color <- colrs[V(ag)$sex]
# weist dem Vertex-Attribut color die Funktion colrs zu, die wir vorher mit zwei Farben definiert haben.

plot(ag)
# Die Sortierung der Farben ist numerisch an die Reihenfolge des Attributs angelegt.

# Verschiedene Darstellung von Webseite und Autor, bi-partite

V(ag)[V(ag)$type == 1]$shape <- "square"
V(ag)[V(ag)$type == 0]$shape <- "circle"
plot(ag)


## Degree-Berechnung

# indegree, aufsteigend sortiert

c <- degree(ag, mode = "in")
sort(c)


## Ego-Netzwerke der wichtigsten Webseiten, bemessen am jeweiligen Indegree-Wert:
# achgut (127), faktum_magazin (48), politikxx (34), leserbriefe (23), bazonline (24), veralengsfeld (21)
# Ohne News-Sammel-Seiten:
# achgut (127), faktum_magazin (48), politikxx (34), bazonline (24), veralengsfeld (21), publicomag (19)

## Darstellung der Ego-Netzwerke

# Ego-Netzwerk achgut

vachgut <- subgraph <- make_ego_graph(ag, order=1, c("achgut"))
plot(vachgut[[1]], edge.arrow.size=.1, vertex.color="lightblue", vertex.frame.color="white",  vertex.label.dist=1.5, vertex.label.cex=.8, vertex.label.family="Helvetica", layout = layout_with_fr)

# Ego-Netzwerk faktum_magazin

vfaktum_magazin <- subgraph <- make_ego_graph(ag, order=1, c("faktum_magazin"))
plot(vfaktum_magazin[[1]], edge.arrow.size=.1, vertex.color="lightblue", vertex.frame.color="white",  vertex.label.dist=1.5, vertex.label.cex=.8, vertex.label.family="Helvetica", layout = layout_with_fr)

# Ego-Netzwerk politikxx

vpolitikxx <- subgraph <- make_ego_graph(ag, order=1, c("politikxx"))
ind <- degree (ag, mode="out")
plot(vpolitikxx[[1]], edge.arrow.size=.1, vertex.size=ind*3, vertex.color="lightblue", vertex.frame.color="white",  vertex.label.dist=1.5, vertex.label.cex=.8, vertex.label.family="Helvetica", layout = layout_with_fr)

# Ego-Netzwerk leserbriefe

vleserbriefe <- subgraph <- make_ego_graph(ag, order=1, c("leserbriefe"))
plot(vleserbriefe[[1]], edge.arrow.size=.1)

# Ego-Netzwerk bazonline

vbazonline <- subgraph <- make_ego_graph(ag, order=1, c("bazonline"))
plot(vbazonline[[1]], edge.arrow.size=.1)

# Ego-Netzwerk veralengsfeld

vveralengsfeld <- subgraph <- make_ego_graph(ag, order=1, c("veralengsfeld"))
plot(vveralengsfeld[[1]], edge.arrow.size=.1)

# Ego-Netzwerk publicomag

vpublicomag <- subgraph <- make_ego_graph(ag, order=1, c("publicomag"))
plot(vpublicomag[[1]], edge.arrow.size=.1)


## Netzwerke mit Qualitätsmedien

vertex_attr(ag)
 # Teilnetzwerk nur mit Autoren, die bei Qualitätsmedien publizierten (qualitätsmedium = 2)

qualitaet <- delete_vertices(ag, V(ag)[qualitaetsmedium=="1"])
plot(qualitaet, edge.arrow.size=.1, layout= layout_with_kk, main="Qualitätsmedien")
vertex_attr(qualitaet)
degree(qualitaet)
V(qualitaet)$degreequalitaet = degree(qualitaet) 
qualitaet2 <- delete_vertices(qualitaet, V(qualitaet)[degreequalitaet=="0"])
vertex_attr(qualitaet2)
ind <- degree(qualitaet2, mode="in")
plot(qualitaet2, edge.arrow.size=.1, vertex.color="lightblue", vertex.frame.color="white",  vertex.label.dist=1.3, vertex.label.cex=.8, vertex.label.family="Helvetica", layout = layout_with_fr, main="Qualitätsmedien")
# normalized = TRUE
# vertex.size=ind*50,

## Betweenness-Netzwerke

# betweenness(ag) --> immer NULL!

# Ego-Netzwerke der 5 wichtigsten Autoren
# Identifikation hauptsächlicher Multiplikatoren (siehe Ego-Netzwerke?)
# Netzwerke mit Farbverläufe zu page impressions und social media traffic




